#+TITLE: API Docs
#+AUTHOR: Dang Quang Vu

* Test
#+name: host
#+BEGIN_SRC elisp
"http://localhost:8080"
#+END_SRC

#+name: headers
#+BEGIN_SRC elisp
"Content-Type: application/json
User-Agent: Emacs30"
#+END_SRC


#+begin_src restclient :var host=host
GET :host
#+end_src

* Api

#+begin_src restclient :var host=host :var headers=headers
POST :host/api/login
:headers
{
  "username": "demo1",
  "pwd": "welcome"
}
#+end_src

#+RESULTS:
#+BEGIN_SRC js
{
  "result": {
    "success": true
  }
}
// POST http://localhost:8080/api/login
// HTTP/1.1 200 OK
// content-type: application/json
// set-cookie: auth-token=user-1.exp.sign
// content-length: 27
// date: Fri, 23 May 2025 16:35:50 GMT
// Request duration: 0.003789s
#+END_SRC


#+begin_src rust
    match client_status_error {
        Some((status_code, client_error)) => {
            debug!("HANDLING ERROR CASE: status={}, error={:?}", status_code, client_error);
            let client_error_body = json!({
                "id": uuid.to_string(),
                "status": "error",
                "timestamp": format_time(now_utc()),
                "error": {
                    "type": client_error.as_ref(),
                    "code": status_code.as_u16()
                }
            });
            error!("CLIENT ERROR BODY: \n {client_error_body}");
            (status_code, Json(client_error_body)).into_response()
        }
        None => {
            debug!("HANDLING SUCCESS CASE: status={}", parts.status);
            let status = parts.status;
            let body = to_bytes(body, usize::MAX).await.unwrap_or_default();
            let body_string = String::from_utf8(body.to_vec()).unwrap_or_default();
            let data: Value = serde_json::from_str(&body_string).unwrap_or(Value::Null);

            let success_body = json!({
                "id": uuid.to_string(),
                "status": if status.is_success() { "success" } else { "error" },
                "data": data,
                "meta": {
                    "timestamp": format_time(now_utc()),
                }
            });

            let client_error = client_status_error.unzip().1;

            let _ = log_request(uri, req_method, req_stamp, ctx, web_error, client_error).await;
            (status, Json(success_body)).into_response()
        }
    }
#+end_src
