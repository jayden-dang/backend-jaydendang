[env] ## tells cargo make that we're in the context of a Cargo workspace
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[config] ## we want most/all of our tasks to run in the context of a workspace
default_to_workspace = false

[tasks.dev]
install_crate = "cargo-watch"
cwd = "./crates/gateways/web_server"
command = "cargo"
args = ["watch", "-x", "clippy", "-x", "run"]
env = { RUST_LOG = "info,jd_=debug,web_server=info,api_gateway=info,jd_storage=trace,sqlx=warn,axum=warn,tokio=warn,h2=warn,tower=warn,reqwest=warn", ENVIRONMENT = "development" }

[tasks.dev-info]
install_crate = "cargo-watch"
cwd = "./crates/gateways/web_server"
command = "cargo"
args = ["watch", "-x", "clippy", "-x", "run"]
env = { RUST_LOG = "info,jd_=info,web_server=info,api_gateway=info,jd_storage=debug,sqlx=warn,axum=warn,tokio=warn,h2=warn,tower=warn,reqwest=warn", ENVIRONMENT = "development" }

[tasks.staging]
install_crate = "cargo-watch"
cwd = "./crates/gateways/web_server"
command = "cargo"
args = ["watch", "-x", "clippy", "-x", "run"]
env = { RUST_LOG = "info,jd_=info,web_server=info,api_gateway=info,jd_storage=info,sqlx=warn,axum=warn,tokio=warn,h2=warn,tower=warn,reqwest=warn", ENVIRONMENT = "staging" }

[tasks.production]
install_crate = "cargo-watch"
cwd = "./crates/gateways/web_server"
command = "cargo"
args = ["watch", "-x", "clippy", "-x", "run"]
env = { RUST_LOG = "warn,jd_=info,web_server=info,api_gateway=info,jd_storage=warn,sqlx=warn,axum=warn,tokio=warn,h2=warn,tower=warn,reqwest=warn", ENVIRONMENT = "production" }

[tasks.test-env]
install_crate = "cargo-watch"
cwd = "./crates/gateways/web_server"
command = "cargo"
args = ["watch", "-x", "clippy", "-x", "run"]
env = { RUST_LOG = "warn,jd_=error", ENVIRONMENT = "testing" }

[tasks.run-all]
description = "Start all required services and run the application"
dependencies = ["db-start", "redis-up"]
script = [
    "echo 'Starting all services...'",
    "cargo make dev"
]

[tasks.run-staging]
description = "Start all services and run in staging environment"
dependencies = ["db-start", "redis-up"]
script = [
    "echo 'Starting staging environment...'",
    "cargo make staging"
]

[tasks.run-production]
description = "Start all services and run in production environment"
dependencies = ["db-start", "redis-up"]
script = [
    "echo 'Starting production environment...'",
    "cargo make production"
]

[tasks.debug]
install_crate="cargo-watch"
cwd = "./crates/gateways/web_server"
command = "cargo"
args = ["watch", "-x", "clippy", "-x", "run"]
env = { RUST_LOG = "debug" }

[tasks.format]
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--", "--emit=files"]

[tasks.fix]
command = "cargo"
args = ["fix","--allow-dirty"]

[tasks.lint]
command = "cargo"
args = ["clippy"]

[tasks.lint-staged]
command = "npx"
args = ["lint-staged"]

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.build]
command = "cargo"
args = ["build" , "--release"]

[tasks.test]
command = "cargo"
args = ["nextest", "run"]

[tasks.test-watch]
install_crate = "cargo-watch"
command = "cargo"
args = ["watch", "-x", "test"]

# ================================
# Database Management Tasks
# ================================

[tasks.db-start]
description = "Start PostgreSQL database container"
command = "docker"
args = ["compose","-f", "deployment/docker/docker-compose.postgres.yml","up", "-d", "--build"]

[tasks.db-build]
description = "Build PostgreSQL database image"
command = "docker"
args = ["compose", "-f", "deployment/docker/docker-compose.postgres.yml", "build"]

[tasks.db-restart]
description = "Rebuild and start PostgreSQL database container"
command = "docker"
args = ["compose", "-f", "deployment/docker/docker-compose.postgres.yml", "up", "-d", "--build"]

[tasks.db-stop]
description = "Stop PostgreSQL database container"
command = "docker"
args = ["compose", "-f", "deployment/docker/docker-compose.postgres.yml", "down"]

[tasks.db-logs]
description = "View PostgreSQL database logs"
command = "docker"
args = ["compose", "-f", "deployment/docker/docker-compose.postgres.yml", "logs", "-f", "database"]

[tasks.db-shell]
description = "Connect to PostgreSQL database shell"
command = "docker"
args = ["compose", "-f", "deployment/docker/docker-compose.postgres.yml", "exec", "database", "psql", "-U", "jayden", "-d", "jayden-blog"]

[tasks.db-reset]
description = "Reset PostgreSQL database completely"
script = [
    "docker compose -f deployment/docker/docker-compose.postgres.yml down -v",
    "docker volume rm my_pgdata 2>/dev/null || true",
    "docker compose -f deployment/docker/docker-compose.postgres.yml up -d --build"
]

[tasks.db-fresh]
description = "Fresh database setup"
dependencies = ["db-reset"]
script = [
    "echo 'Database reset complete'",
    "sleep 5",
    "docker compose -f deployment/docker/docker-compose.postgres.yml logs database"
]


# ================================
# Redis Management Tasks
# ================================

[tasks.redis-up]
description = "Start Redis with Docker Compose"
cwd = "./deployment/docker"
command = "docker-compose"
args = ["up", "-d", "redis"]

[tasks.redis-down]
description = "Stop Redis container"
cwd = "./deployment/docker"
command = "docker-compose"
args = ["stop", "redis"]

[tasks.redis-restart]
description = "Restart Redis container"
dependencies = ["redis-down", "redis-up"]
