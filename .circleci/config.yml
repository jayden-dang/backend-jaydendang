version: 2.1

orbs:
  docker: circleci/docker@2.5.0

executors:
  self-hosted:
    machine: true

commands:
  setup-rust:
    description: "Setup Rust environment"
    steps:
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            echo "source $HOME/.cargo/env" >> $HOME/.bashrc
            source $HOME/.cargo/env
            rustup default stable
            rustup update

  health-check:
    description: "Check application health"
    steps:
      - run:
          name: Health check
          command: |
            for i in {1..30}; do
              if curl -f http://$EC2_HOST:8080/health; then
                echo "Application is healthy"
                exit 0
              fi
              echo "Waiting for application to be healthy... ($i/30)"
              sleep 10
            done
            echo "Application failed to become healthy"
            exit 1

  notify-discord:
    description: "Send notification to Discord"
    parameters:
      status:
        type: string
        default: "success"
    steps:
      - run:
          name: Notify Discord
          command: |
            curl -H "Content-Type: application/json" \
                 -d "{\"content\":\"✅ Deployment $CIRCLE_JOB $<< parameters.status >>!\nRepository: $CIRCLE_PROJECT_REPONAME\nEnvironment: Production\nURL: https://jaydendang.com\nBranch: $CIRCLE_BRANCH\nCommit: $CIRCLE_SHA1\nAuthor: $CIRCLE_USERNAME\"}" \
                 $DISCORD_WEBHOOK

jobs:
  test:
    docker:
      - image: cimg/rust:1.70
    steps:
      - checkout
      - run:
          name: Install Rust
          command: |
            rustup default stable
            rustup update
      # Uncomment nếu muốn chạy tests
      # - run:
      #     name: Run tests
      #     command: cargo test

  build-and-push:
    machine: true
    steps:
      - checkout
      # DEBUG Environment Variables
      - run:
          name: Debug environment
          command: |
            echo "DOCKER_USERNAME: $DOCKER_USERNAME"
            echo "DOCKER_PASSWORD length: ${#DOCKER_PASSWORD}"
            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
      # MANUAL DOCKER LOGIN
      - run:
          name: Login to Docker Hub
          command: |
            if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
              echo "Error: DOCKER_USERNAME or DOCKER_PASSWORD not set"
              exit 1
            fi
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - docker/build:
          image: ${DOCKER_IMAGE}
          tag: ${CIRCLE_SHA1},latest
      - docker/push:
          image: ${DOCKER_IMAGE}
          tag: ${CIRCLE_SHA1},latest

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ENhurBCbrBDltZ/4Q4bMgpvZ5CHicezLiHniatYkhQU"
      - run:
          name: Deploy to EC2 via SSH
          command: |
            ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "
              export DOCKER_USERNAME='$DOCKER_USERNAME'
              export DOCKER_PASSWORD='$DOCKER_PASSWORD'
              export DOCKER_IMAGE='$DOCKER_IMAGE'
              export CIRCLE_SHA1='$CIRCLE_SHA1'

              # Ensure PostgreSQL is running
              if ! sudo systemctl is-active --quiet postgresql; then
                echo 'Setting up PostgreSQL...'
                sudo dnf install -y postgresql15-server postgresql15 || true
                sudo postgresql-setup --initdb || true
                sudo systemctl start postgresql
                sudo systemctl enable postgresql

                # Setup database and user
                sudo -u postgres psql -c \"CREATE USER IF NOT EXISTS jayden WITH PASSWORD 'postgres';\" || true
                sudo -u postgres psql -c \"CREATE DATABASE IF NOT EXISTS jaydenblog OWNER jayden;\" || true
                sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE jaydenblog TO jayden;\" || true
              fi

              # Login to Docker Hub on EC2
              echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin

              # Stop and remove existing containers
              docker stop jaydenblog redis || true
              docker rm jaydenblog redis || true

              # Start Redis
              docker run -d \
                --name redis \
                --restart unless-stopped \
                --network host \
                -v /var/lib/redis:/data \
                redis:7.2-alpine

              # Wait for Redis to start
              sleep 5

              # Pull and run new app container with additional libs
              docker pull \$DOCKER_IMAGE:\$CIRCLE_SHA1
              docker run -d \
                --name jaydenblog \
                --restart unless-stopped \
                -p 8080:8080 \
                --network host \
                -e DATABASE_URL=postgresql://jayden:postgres@localhost:5432/jaydenblog \
                -e REDIS_URL=redis://localhost:6379 \
                -e RUST_LOG=info \
                -e RUST_BACKTRACE=1 \
                \$DOCKER_IMAGE:\$CIRCLE_SHA1 /bin/bash -c 'apt-get update && apt-get install -y libssl1.1 && ./app'

              # Show status and logs for debugging
              echo '=== Container Status ==='
              docker ps -a

              echo '=== Application Logs ==='
              docker logs jaydenblog --tail 50

              echo '=== Deployment completed ==='
            "
      - health-check
      - notify-discord

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "YOUR_SSH_KEY_FINGERPRINT_HERE"  # Thay bằng fingerprint thực tế
      - run:
          name: Cleanup Docker resources on EC2
          command: |
            ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "
              echo '=== Before cleanup ==='
              df -h
              docker system df

              echo '=== Cleaning up old images (keep latest 3) ==='
              # Keep only latest 3 versions of our app image
              docker images $DOCKER_IMAGE --format 'table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}' | tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print \$1}' | xargs -r docker rmi || true

              echo '=== Cleaning up unused resources ==='
              # Remove unused images, containers, networks (but keep volumes for data persistence)
              docker system prune -f

              # Remove dangling images only
              docker image prune -f

              # Clean up old container logs (older than 7 days)
              find /var/lib/docker/containers/ -name '*.log' -mtime +7 -delete 2>/dev/null || true

              echo '=== After cleanup ==='
              df -h
              docker system df

              echo '=== Current running containers ==='
              docker ps
            "
      - notify-discord:
          status: "cleanup completed"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test
      - build-and-push:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build-and-push
          filters:
            branches:
              only: main
      - cleanup:
          requires:
            - deploy
          filters:
            branches:
              only: main
