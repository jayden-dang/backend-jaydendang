version: 2.1

orbs:
  docker: circleci/docker@2.5.0

executors:
  self-hosted:
    machine: true

commands:
  setup-rust:
    description: "Setup Rust environment"
    steps:
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            echo "source $HOME/.cargo/env" >> $HOME/.bashrc
            source $HOME/.cargo/env
            rustup default stable
            rustup update

  # install-nextest:
  #   description: "Install cargo-nextest"
  #   steps:
  #     - run:
  #         name: Install cargo-nextest
  #         command: |
  #           source $HOME/.cargo/env
  #           cargo install cargo-nextest

  # run-tests:
  #   description: "Run tests and checks"
  #   steps:
  #     - run:
  #         name: Run tests
  #         command: |
  #           source $HOME/.cargo/env
  #           cargo nextest run --workspace
  #     - run:
  #         name: Run clippy
  #         command: |
  #           source $HOME/.cargo/env
  #           cargo clippy --workspace --all-targets --all-features
  #     - run:
  #         name: Check format
  #         command: |
  #           source $HOME/.cargo/env
  #           cargo fmt --all -- --check

  deploy-application:
    description: "Deploy application to EC2"
    steps:
      - run:
          name: Deploy application
          command: |
            # Stop and remove existing containers if they exist
            docker stop jaydenblog redis || true
            docker rm jaydenblog redis || true

            # Start Redis
            docker run -d \
              --name redis \
              --restart unless-stopped \
              --network host \
              -v /var/lib/redis:/data \
              redis:7.2-alpine \
              redis-server /etc/redis/redis.conf

            # Run new container with database and Redis connection
            docker run -d \
              --name jaydenblog \
              --restart unless-stopped \
              -p 8080:8080 \
              --network host \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              -e DATABASE_URL=postgresql://jayden:postgres@localhost:5432/jaydenblog \
              -e REDIS_URL=redis://localhost:6379 \
              -e RUST_LOG=info \
              -e RUST_BACKTRACE=1 \
              ${DOCKER_IMAGE}:${CIRCLE_SHA1}

            # Clean up old images
            docker image prune -f

  health-check:
    description: "Check application health"
    steps:
      - run:
          name: Health check
          command: |
            for i in {1..30}; do
              if curl -f http://localhost:8080/health; then
                echo "Application is healthy"
                exit 0
              fi
              echo "Waiting for application to be healthy... ($i/30)"
              sleep 10
            done
            echo "Application failed to become healthy"
            exit 1

  notify-discord:
    description: "Send notification to Discord"
    parameters:
      status:
        type: string
        default: "success"
    steps:
      - run:
          name: Notify Discord
          command: |
            curl -H "Content-Type: application/json" \
                 -d "{\"content\":\"âœ… Deployment $CIRCLE_JOB $<< parameters.status >>!\nRepository: $CIRCLE_PROJECT_REPONAME\nEnvironment: Production\nURL: https://jaydendang.com\nBranch: $CIRCLE_BRANCH\nCommit: $CIRCLE_SHA1\nAuthor: $CIRCLE_USERNAME\"}" \
                 $DISCORD_WEBHOOK

jobs:
  test:
    executor: self-hosted
    steps:
      - checkout
      - setup-rust
      - install-nextest
      - run-tests

  build-and-push:
    executor: self-hosted
    steps:
      - checkout
      - docker/build:
          image: ${DOCKER_IMAGE}
          tag: ${CIRCLE_SHA1},latest
      - docker/push:
          image: ${DOCKER_IMAGE}
          tag: ${CIRCLE_SHA1},latest

  deploy:
    executor: self-hosted
    steps:
      - checkout
      - deploy-application
      - health-check
      - notify-discord

  cleanup:
    executor: self-hosted
    steps:
      - run:
          name: Cleanup Docker images
          command: docker system prune -af --volumes
      - notify-discord:
          status: "cleanup completed"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test
      - build-and-push:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build-and-push
          filters:
            branches:
              only: main
      - cleanup:
          requires:
            - deploy
          filters:
            branches:
              only: main
