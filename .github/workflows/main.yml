name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: jaydendang/jayden
  AWS_REGION: ap-southeast-1
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Run tests
        run: cargo nextest run --workspace

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features

      - name: Check format
        run: cargo fmt --all -- --check

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            RUST_VERSION=1.87.0
            BUILD_DATE=${{ github.event.repository.updated_at }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to DockerHub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Pull latest image
            docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

            # Stop and remove existing containers if they exist
            docker stop jaydenblog redis || true
            docker rm jaydenblog redis || true

            # Start Redis
            docker run -d \
              --name redis \
              --restart unless-stopped \
              --network host \
              -v /var/lib/redis:/data \
              redis:7.2-alpine \
              redis-server /etc/redis/redis.conf

            # Run new container with database and Redis connection
            docker run -d \
              --name jaydenblog \
              --restart unless-stopped \
              -p 8080:8080 \
              --network host \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              -e DATABASE_URL=postgresql://jayden:postgres@localhost:5432/jaydenblog \
              -e REDIS_URL=redis://localhost:6379 \
              -e RUST_LOG=info \
              -e RUST_BACKTRACE=1 \
              ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

            # Clean up old images
            docker image prune -f
