name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: jaydendang/jayden
  AWS_REGION: ap-southeast-1
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Run tests
        run: cargo nextest run --workspace

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features

      - name: Check format
        run: cargo fmt --all -- --check

  build-and-push:
    needs: test
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker push ${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://jaydendang.com
    steps:
      - name: Deploy application
        run: |
          # Stop and remove existing containers if they exist
          docker stop jaydenblog redis || true
          docker rm jaydenblog redis || true

          # Start Redis
          docker run -d \
            --name redis \
            --restart unless-stopped \
            --network host \
            -v /var/lib/redis:/data \
            redis:7.2-alpine \
            redis-server /etc/redis/redis.conf

          # Run new container with database and Redis connection
          docker run -d \
            --name jaydenblog \
            --restart unless-stopped \
            -p 8080:8080 \
            --network host \
            --log-driver json-file \
            --log-opt max-size=10m \
            --log-opt max-file=3 \
            -e DATABASE_URL=postgresql://jayden:postgres@localhost:5432/jaydenblog \
            -e REDIS_URL=redis://localhost:6379 \
            -e RUST_LOG=info \
            -e RUST_BACKTRACE=1 \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

          # Clean up old images
          docker image prune -f

      - name: Health check
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8080/health; then
              echo "Application is healthy"
              exit 0
            fi
            echo "Waiting for application to be healthy... ($i/30)"
            sleep 10
          done
          echo "Application failed to become healthy"
          exit 1

      - name: Notify successful deployment
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"âœ… Deployment successful!\nRepository: ${{ github.event.repository.name }}\nEnvironment: Production\nURL: https://jaydendang.com\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}

  cleanup:
    needs: deploy
    runs-on: self-hosted
    if: always()
    steps:
      - name: Cleanup Docker images
        run: |
          docker system prune -af --volumes

      - name: Notify cleanup status
        if: always()
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"Cleanup job ${{ job.status }}\nRepository: ${{ github.event.repository.name }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
