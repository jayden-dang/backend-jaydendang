name: Code Quality & Tests

on:
  push:
    branches: ["main, dev"]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.87.0
          components: rustfmt, clippy

      - name: Install dependencies
        if: runner.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y alsa-utils libasound2-dev udev

      - name: Install cargo-nextest
        run: cargo install cargo-nextest --force

      - name: Run tests
        run: cargo nextest run --workspace

      - name: Run tests with coverage
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-llvm-cov
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./lcov.info
          fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.87.0
          components: rustfmt, clippy

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features

      - name: Check format
        run: cargo fmt --all -- --check

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-format-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-format-

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.87.0
          components: rustfmt

      - name: Format code
        run: |
          cargo fmt --all

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --quiet && git diff --staged --quiet || (git commit -m "Format code" && git push)
