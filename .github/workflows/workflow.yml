name: CI/CD Pipeline

on:
  pull_request:
    branches: ["dev", "main"]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".gitignore"
  push:
    branches: ["dev", "main"]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".gitignore"
  workflow_dispatch:
    inputs:
      run_full_test_suite:
        description: 'Run full test suite (including slow tests)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      cargo: ${{ steps.changes.outputs.cargo }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - '**/*.rs'
              - '**/Cargo.toml'
              - '**/Cargo.lock'
            cargo:
              - '**/Cargo.toml'
              - '**/Cargo.lock'

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: lint-${{ hashFiles('**/Cargo.toml') }}
          cache-on-failure: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: |
          cargo clippy --workspace --all-targets --all-features -- -D warnings
          cargo clippy --workspace --all-targets --no-default-features -- -D warnings

      - name: Check documentation
        run: cargo doc --workspace --all-features --no-deps --document-private-items

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.cargo == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit --force

      - name: Run security audit
        run: cargo audit

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1

  test:
    name: Test Suite
    needs: [changes, lint]
    if: needs.changes.outputs.rust == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}
          cache-on-failure: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            libasound2-dev \
            libudev-dev \
            pkg-config

      - name: Install cargo-nextest
        uses: taiki-e/install-action@cargo-nextest

      - name: Build project
        run: cargo build --workspace --all-features --target ${{ matrix.target }}

      - name: Run tests
        run: |
          if [[ "${{ github.event.inputs.run_full_test_suite }}" == "true" ]]; then
            cargo nextest run --workspace --all-features --target ${{ matrix.target }}
          else
            cargo nextest run --workspace --all-features --target ${{ matrix.target }} --exclude-ignored
          fi

      - name: Run doctests
        run: cargo test --workspace --all-features --doc --target ${{ matrix.target }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [changes, lint]
    if: needs.changes.outputs.rust == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            libasound2-dev \
            libudev-dev \
            pkg-config

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@cargo-tarpaulin

      - name: Generate coverage report
        run: |
          cargo tarpaulin --workspace --all-features \
            --timeout 300 \
            --out xml \
            --output-dir coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage/cobertura.xml
          fail_ci_if_error: false

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [changes, lint]
    if: |
      needs.changes.outputs.rust == 'true' &&
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: bench-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            libasound2-dev \
            libudev-dev \
            pkg-config

      - name: Run benchmarks
        run: cargo bench --workspace --all-features

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          tool: 'cargo'
          output-file-path: target/criterion/*/base/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security, coverage]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      contains(github.event.head_commit.message, '[release]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-release
        run: cargo install cargo-release --force

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cargo release --execute --no-confirm

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, lint, security, coverage]
    if: always()
    steps:
      - name: Notify on success
        if: |
          needs.test.result == 'success' &&
          needs.lint.result == 'success' &&
          needs.security.result == 'success'
        run: |
          echo "✅ All checks passed successfully!"

      - name: Notify on failure
        if: |
          needs.test.result == 'failure' ||
          needs.lint.result == 'failure' ||
          needs.security.result == 'failure'
        run: |
          echo "❌ Some checks failed. Please review the logs."
          exit 1
